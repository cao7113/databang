#!/usr/bin/env ruby
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'byebug'
  gem 'thor'

  gem 'sequel'
  gem 'pg'
end
require 'digest'

class CrawlerCLI < Thor
  class_option :debug, type: :boolean, default: false, aliases: [:d]
  class_option :dry, type: :boolean, default: false
  class_option :idnum, type: :boolean, default: false

  desc 'get', 'download data'
  option :save, type: :boolean, default: false, aliases: [:s], banner: 'save to local data dir'
  def get(size = 3)
    data = read_remote_data(size)
    if options[:save]
      save_to = data_home.join "#{script_name}-#{size}-#{Time.now.strftime("%Y%m%d%H%M%S")}.json"
      File.write(save_to, data)
      puts "saved data into #{save_to}"
    else
      puts data
    end
  end

  desc 'try', 'explore sample data'
  def try(size = 3, file = full_json_datafile)
    hash = load_json_data(file)
    rows = hash['rows']

    rows = rows.sample(size).map do |row|
      norm_person_info(row)
    end
    headers = rows.first.keys 

    result = [headers]
    rows.each do |r|
      result << r.values
    end
    print_table result
  end

  desc 'csv', 'export data to csv file'
  def csv(file = full_json_datafile)
    hash = load_json_data(file)
    rows = hash['rows']

    rows = rows.map do |row|
      norm_person_info(row)
    end

    headers = rows.first.keys 

    require 'csv'
    csv_str = CSV.generate do |csv|
      csv << headers
      rows.each_with_index do |r, idx|
        puts "==handle #{idx} #{r}"
        csv << r.values
      end
    end
    csvfile = data_home.join("#{script_name}-full#{'-idnum' if options[:idnum]}.csv")
    csvfile.write(csv_str)
    puts "==write to #{csvfile}"
  end

  desc 'dbcli', 'try db query in ruby sequel way'
  def dbcli(url = 'postgres://postgres:password@localhost:15432/bjren')
    db = Sequel.connect(url)
    members = db.from(:members)
    #blanks = members.where(id_num: nil)
    byebug
    puts 
  end

  desc 'import', 'import into pg'
  def import(url = 'postgres://postgres:password@localhost:15432/bjren')
    db = Sequel.connect(url)
    members = db.from(:members)
    members.delete
    puts members.count

    rows = load_json_data['rows']
    rows.each_with_index do |row, idx|
      row = norm_person_info(row)
      puts "==handling #{idx} with #{row}"
      attrs = row.slice(*%w(name unit birthday score gender))
      mapping = {
        id_card: 'idCard',
        id_card_sha: 'idCardSHA',
        id_num: 'idNum'
      }
      mapping.each do |k, v|
        attrs[k] = row[v]
      end
      members.insert(attrs)
    end
    puts members.count
  end

  desc 'meta', 'show metadata format info'
  def meta
    file = data_home.join("#{script_name}-demo.json")
    pp load_json_data(file, 1)
  end

  desc 'list', 'ls data files'
  def list
    system "ls -lh #{data_home}"
  end
  map 'ls' => 'list'

  no_commands do
    def data_home
      Pathname(__dir__).join('data')
    end

    def data_script
      Pathname(__FILE__)
    end

    def script_name
      data_script.basename('.rb')
    end

    def full_json_datafile
      data_home.join("#{script_name}-full.json")
    end

    def load_json_data(file = full_json_datafile, request_size = 6019)
      file = Pathname(file) unless file.is_a?(Pathname)
      unless file.exist? 
        data = read_remote_data(request_size)
        # cached
        file.write data
      end
      data = file.read 
      require 'json'
      JSON.parse(data)
    end

    def norm_person_info(row)
      h = row.slice(*%w(name unit score idCard idCardSHA))
      # get info from id info
      #https://zhidao.baidu.com/question/18628715.html
      idcard = row['idCard'] 
      if idcard.size == 18
        require 'date'
        h['birthday'] = Date.parse(idcard[6..13])
      else
        h['birthday'] = nil
      end
      if options[:idnum]
        #"idCard"=>"32092219721222****",
        #"idCardSHA"=>
        #"9ef70bde894959a4e4a1d1b2b9592b470294f9e4012a8cf480319665d1a7c1c6"
        idmask = row['idCard']
        idsha = row['idCardSHA']
        idnum = try_idnum(idmask, idsha)
        h['idNum'] = idnum
        if idnum
          h['gender'] = idnum[-2].to_i.odd? ? 'male' : 'female'
        end
      end
      h
    end

    def try_idnum(idmask, idsha)
      prefix = idmask.gsub('*', '')
      sha = idsha

      tails = ['X'] + (0..9).to_a
      0.upto(999) do |num|
        suf = "%03d" % num
        tails.each do |t|
          ids = "#{prefix}#{suf}#{t}"
          return ids if sha == Digest::SHA256.hexdigest(ids)
        end
      end
      nil
    end

    def read_remote_data(size = 3)
      url = "http://www.bjrbj.gov.cn/integralpublic/settlePerson/settlePersonJson?sort=pxid&order=asc&limit=10&offset=0&name=&rows=#{size}&page=0&_=#{(Time.now.to_f * 1000).to_i}"
      puts "get data from url: #{url}"

      require 'open-uri'
      data  = open(url) do |f| 
        #p f.content_type     # "text/html"
        #p f.charset          # "gbk"
        #p f.content_encoding # []
        f.read
      end
      # fix 'gbk', convert to ruby standard utf8
      # "\xFE\x9F" from GBK to UTF-8 (Encoding::UndefinedConversionError)
      data.encode!('utf-8', undef: :replace)
    end
  end
end

CrawlerCLI.start

__END__

in shell

for i in `seq -w 0 9999`; do if \[\[ "$(echo -n "61010319770302$i" | sha256sum | cut -f1 -d' ')" = d00ebe5cd73f1ecf80c2e9d1af26de6cb026eca57b746f77d2728f576e1088c5 ]]; then echo "$i"; fi; done
